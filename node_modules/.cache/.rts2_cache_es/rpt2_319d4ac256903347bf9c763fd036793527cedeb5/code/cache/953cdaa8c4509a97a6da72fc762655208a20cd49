{"code":"import { Base } from \"../base\";\r\nimport { createAnalyticsPath, getAllAnalyticsPath, createAnalyticsVisitorsPath } from \"./path\";\r\nconst resource = \"analyticsbyid\";\r\nexport class Analytics extends Base {\r\n    constructor(config) {\r\n        super(config);\r\n    }\r\n    createAnalytics(analytics) {\r\n        analytics.userAgent = navigator.userAgent;\r\n        console.log(\"userAgent :\", analytics.userAgent);\r\n        console.log(\"request\", this.request);\r\n        return this.request(`${createAnalyticsPath}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(analytics)\r\n        });\r\n    }\r\n    getAnalytics() {\r\n        return this.request(`${getAllAnalyticsPath}`);\r\n    }\r\n    getAnalyticsById(id) {\r\n        return this.request(`${resource}/${id}`);\r\n    }\r\n    trackAnalyticsEvents(analytics) {\r\n        try {\r\n            const event = this.request(`${createAnalyticsPath}`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(analytics)\r\n            });\r\n            return event;\r\n        }\r\n        catch (error) {\r\n            console.error('Failed to track event:', analytics, error);\r\n        }\r\n    }\r\n    CreateVisitors(visitors) {\r\n        try {\r\n            console.log(\"this.getVisitors()\", this.verifVisitors());\r\n            if (this.verifVisitors() === true) {\r\n                console.log(\"already counted\");\r\n            }\r\n            else {\r\n                visitors.userAgent = navigator.userAgent;\r\n                console.log(\"userAgent :\", visitors.userAgent);\r\n                console.log(\"request\", this.request);\r\n                const event = this.request(`${createAnalyticsVisitorsPath}`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(visitors)\r\n                });\r\n                sessionStorage.setItem('visited', 'true');\r\n                return event;\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error('Failed to track event:', error);\r\n        }\r\n    }\r\n    verifVisitors() {\r\n        const visitors = sessionStorage.getItem('visited');\r\n        if (visitors) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","references":["/Users/yatech/Documents/ESGI/web_analytics/projet/analyticsdk/src/base.ts","/Users/yatech/Documents/ESGI/web_analytics/projet/analyticsdk/src/analytics/type.ts","/Users/yatech/Documents/ESGI/web_analytics/projet/analyticsdk/src/analytics/path.ts"],"dts":{"name":"/Users/yatech/Documents/ESGI/web_analytics/projet/analyticsdk/dist/analytics/index.d.ts","writeByteOrderMark":false,"text":"import { Base } from \"../base\";\r\nimport { AnalyticsType, CreateAnalyticsType, CreateVisitorsNumberType } from \"./type\";\r\nexport declare class Analytics extends Base {\r\n    constructor(config: {\r\n        appName: string;\r\n        apiKey: string;\r\n        baseUrl?: string;\r\n    });\r\n    createAnalytics(analytics: CreateAnalyticsType): Promise<AnalyticsType>;\r\n    getAnalytics(): Promise<AnalyticsType[]>;\r\n    getAnalyticsById(id: string): Promise<AnalyticsType>;\r\n    trackAnalyticsEvents(analytics: CreateAnalyticsType): Promise<unknown> | undefined;\r\n    CreateVisitors(visitors: CreateVisitorsNumberType): Promise<unknown> | undefined;\r\n    verifVisitors(): boolean;\r\n}\r\n"}}
